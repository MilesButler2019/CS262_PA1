# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chat_pb2 as chat__pb2


class ChatServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getUsers = channel.unary_stream(
                '/ChatService/getUsers',
                request_serializer=chat__pb2.Request.SerializeToString,
                response_deserializer=chat__pb2.Credentials.FromString,
                )
        self.getInbox = channel.unary_stream(
                '/ChatService/getInbox',
                request_serializer=chat__pb2.Request.SerializeToString,
                response_deserializer=chat__pb2.Message.FromString,
                )
        self.CreateAccount = channel.stream_unary(
                '/ChatService/CreateAccount',
                request_serializer=chat__pb2.Credentials.SerializeToString,
                response_deserializer=chat__pb2.AccountStatus.FromString,
                )
        self.SendChat = channel.stream_stream(
                '/ChatService/SendChat',
                request_serializer=chat__pb2.Message.SerializeToString,
                response_deserializer=chat__pb2.MessageStatus.FromString,
                )
        self.DeleteAccount = channel.unary_unary(
                '/ChatService/DeleteAccount',
                request_serializer=chat__pb2.Credentials.SerializeToString,
                response_deserializer=chat__pb2.AccountStatus.FromString,
                )


class ChatServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getInbox(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAccount(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendChat(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getUsers': grpc.unary_stream_rpc_method_handler(
                    servicer.getUsers,
                    request_deserializer=chat__pb2.Request.FromString,
                    response_serializer=chat__pb2.Credentials.SerializeToString,
            ),
            'getInbox': grpc.unary_stream_rpc_method_handler(
                    servicer.getInbox,
                    request_deserializer=chat__pb2.Request.FromString,
                    response_serializer=chat__pb2.Message.SerializeToString,
            ),
            'CreateAccount': grpc.stream_unary_rpc_method_handler(
                    servicer.CreateAccount,
                    request_deserializer=chat__pb2.Credentials.FromString,
                    response_serializer=chat__pb2.AccountStatus.SerializeToString,
            ),
            'SendChat': grpc.stream_stream_rpc_method_handler(
                    servicer.SendChat,
                    request_deserializer=chat__pb2.Message.FromString,
                    response_serializer=chat__pb2.MessageStatus.SerializeToString,
            ),
            'DeleteAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAccount,
                    request_deserializer=chat__pb2.Credentials.FromString,
                    response_serializer=chat__pb2.AccountStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ChatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChatService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ChatService/getUsers',
            chat__pb2.Request.SerializeToString,
            chat__pb2.Credentials.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getInbox(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ChatService/getInbox',
            chat__pb2.Request.SerializeToString,
            chat__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAccount(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/ChatService/CreateAccount',
            chat__pb2.Credentials.SerializeToString,
            chat__pb2.AccountStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendChat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/ChatService/SendChat',
            chat__pb2.Message.SerializeToString,
            chat__pb2.MessageStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ChatService/DeleteAccount',
            chat__pb2.Credentials.SerializeToString,
            chat__pb2.AccountStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
